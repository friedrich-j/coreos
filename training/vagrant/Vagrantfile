# -*- mode: ruby -*-
# vi: set ft=ruby :


required_plugins = %w(vagrant-ignition vagrant-disksize vagrant-scp)

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

#puts 'Hello!'

$update_channel = "beta"

Vagrant.configure("2") do |config|
  config.vm.box = "coreos-#{$update_channel}"
  config.vm.box_url = "https://#{$update_channel}.release.core-os.net/amd64-usr/current/coreos_production_vagrant_virtualbox.json"

  config.disksize.size = '20GB'

  config.ssh.insert_key = true
  config.ssh.forward_agent = false  # set to 'true' if no hostOnly NIC is attached  

  config.vm.provider :virtualbox do |v|
    v.check_guest_additions = false
    v.functional_vboxsf     = false
    config.ignition.enabled = true
  end

  config.vm.network "private_network", type: "dhcp"

  config.vm.provider :virtualbox do |vb|
    vb.gui = false # false
    vb.name = 'k8s-training'
    vb.memory = 4096
    vb.cpus = 2
#    vb.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]

    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--rtcuseutc", "on"]
    vb.customize ["modifyvm", :id, "--audio", "none"]
    vb.customize ["modifyvm", :id, "--boot1", "dvd"]
    vb.customize ["modifyvm", :id, "--boot2", "net"]
    vb.customize ["modifyvm", :id, "--boot3", "disk"]
    vb.customize ["modifyvm", :id, "--boot4", "none"]
    vb.customize ["modifyvm", :id, "--vram", "128"]
    vb.customize ["modifyvm", :id, "--paravirtprovider", "kvm"]

    config.ignition.config_obj = vb
    config.ignition.path = 'k8s-training.ign'
  end


  SSH_KEY_PATH="#{Dir.home}/.ssh/joerg@matrix.pub"

  if File.exist?(SSH_KEY_PATH)
    config.vm.provision "shell" do |s|
      ssh_pub_key = File.readlines(SSH_KEY_PATH).first.strip
      s.inline = <<-SHELL
        echo #{ssh_pub_key} >> /home/core/.ssh/authorized_keys
      SHELL
    end
  end

#  config.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/"]

  config.vm.provision "shell" do |s|
    s.inline = <<-SHELL
#      sed -i '/\( vagrant insecure public key\)|\( vagrant\)$/d' /home/core/.ssh/authorized_keys
      ssh-keygen -b 4096 -f /home/core/.ssh/id_rsa -P training -C 'training@k8s'
      cat /home/core/.ssh/id_rsa.pub >> /home/core/.ssh/authorized_keys
      docker pull cubeearth/puttygen
      docker run -i cubeearth/puttygen training < /home/core/.ssh/id_rsa > /home/core/.ssh/id_rsa.ppk
      
      ip=`ifconfig | awk -v d=$(route | awk '$1=="default" { print $8 }') 'match($0, /^[^ :]+/) { n=substr($0, RSTART, RLENGTH) } match($0, / +inet [0-9.]+/) { ip=substr($0, RSTART, RLENGTH); gsub(/^ +inet +/, "", ip); if (!match(n, /cni|docker|flannel|lo/) && n != d) { if(i>0) { printf ",%s", ip } else { printf "%s", ip }; i=i+1 }  }'`
      echo -n "$ip" > /home/core/.ssh/hostOnlyIp.txt
      chown -R core:core /home/core/.ssh
      
      echo
      echo "Use following hostOnly IP address to access the provisioned VM: $ip"
      echo
   
      start_time="$(date -u +%s)"   
      echo "waiting for provisioned Kubernetes ..."
      while [[ ! -f /opt/bin/install/ready.txt ]]
      do
      	echo "... $(($(date -u +%s)-$start_time))s"
      	sleep 15
      done
      echo "finished!"
      echo
    SHELL
  end
  
  config.trigger.after :up do |trigger|
  	 trigger.warn = "For the first VM shutdown, either use 'vagrant halt' or remove manually the config drive (second disk)!" if !File.exist?(".vagrant/first_halt")
  end
  
  config.trigger.after :halt do |trigger|
    trigger.ruby do |env,machine|
      if !File.file?(".vagrant/first_halt")
      	system("VBoxManage storageattach #{machine.id} --storagectl 'IDE Controller' --device 0 --port 1 --medium none")
      	File.open(".vagrant/first_halt", "a") {} 
      end
    end
  end
  
  config.trigger.after :destroy do |trigger|
  	File.delete(".vagrant/first_halt") if File.exist?(".vagrant/first_halt")
  end

end


